name: multi-tools-img-CI
on:
  push:
    paths:
      - 'resources/toolkit/**'
      - '.github/workflows/toolkit-image.yml'
  pull_request:
    paths:
      - 'resources/toolkit/**'
      - '.github/workflows/toolkit-image.yml'
  schedule:
    - cron:  '0 0 1 * *'

env:
  RED: \033[1;31m
  GREEN: \033[1;32m
  YELLOW: \033[1;33m
  BLUE: \033[1;34m
  PURPLE: \033[1;35m
  CYAN: \033[1;36m
  BLANK: \033[0m
  WORKING_DIR: resources/toolkit
  IMAGE_NAME: toolkit
  REPOSITORY: ixxel

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    container: 
      image: ixxel/unit-tests-alpine:latest
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: Lint with Hadolint
      id: lint-hadolint
      run: |
        echo -e "${BLUE}[ STEP - LINTING DOCKERFILE ] > Linting ${IMAGE_NAME} Dockerfile with Hadolint.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Hadolint version.${BLANK}"
        hadolint --version
        echo -e "${YELLOW}[ EXECUTING ] > Executing Dockerfile linting.${BLANK}"
        hadolint ${WORKING_DIR}/Dockerfile --ignore DL3007 --ignore DL3017 --ignore DL3018 --ignore DL4001 --ignore DL4006 --ignore DL3013

  build:
    needs: [test]
    strategy:
      matrix:
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    container: 
      image: ixxel/multi-tools-alpine:latest
      options: --privileged
    defaults:
      run:
        shell: bash
    steps:
    - uses: actions/checkout@v2
    - name: Build image version
      id: build-version
      run: |
        echo -e "${BLUE}[ STEP - BUILDING VERSION ] > Building docker image version.${BLANK}"
        echo -e "${YELLOW}[ EXECUTING ] > Executing building.${BLANK}"
        VERSION=$(cat ${WORKING_DIR}/Dockerfile | grep -oE "IMG_VERSION=\"[0-9.]+\"" | grep -oE "[0-9.]+")
        IMAGE_VERSION=${VERSION}-${{ github.run_number }}
        echo ::set-output name=IMAGE_VERSION::${IMAGE_VERSION}
        echo -e "${CYAN}[ INFO ] > Image version for ${IMAGE_NAME} is ${IMAGE_VERSION}.${BLANK}"
    - name: Build image with buildah
      id: build-image
      env:
        IMAGE_VERSION: ${{ steps.build-version.outputs.IMAGE_VERSION }}
      run: |
        echo -e "${BLUE}[ STEP - BUILDING IMAGE ] > Building docker image with buildah.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Buildah version.${BLANK}"
        buildah --version
        echo -e "${CYAN}[ INFO ] > Podman version.${BLANK}"
        podman --version
        echo -e "${YELLOW}[ EXECUTING ] > Executing build ${IMAGE_VERSION}.${BLANK}"
        buildah bud -t ${IMAGE_NAME}:${IMAGE_VERSION} ${WORKING_DIR}
        echo -e "${CYAN}[ INFO ] > Displaying podman built images.${BLANK}"
        podman images
        echo -e "${YELLOW}[ EXECUTING ] > Checking docker image execution.${BLANK}"
        podman run --rm ${IMAGE_NAME}:${IMAGE_VERSION} cat /etc/os-release
        podman run --rm ${IMAGE_NAME}:${IMAGE_VERSION} /usr/local/bin/version.sh
        if [[ $? = 0 ]]
        then
          echo -e "${GREEN}[ CHECK SUCCESS ] > Docker image working properly.${BLANK}"
        else
          echo -e "${RED}[ CHECK FAILED ] > Something wrong with docker image.${BLANK}"
          exit 1
        fi
    - name: Transfer image with Skopeo
      id: transfer-image
      env:
        IMAGE_VERSION: ${{ steps.build-version.outputs.IMAGE_VERSION }}
      run: |
        echo -e "${BLUE}[ STEP - TRANSFERING IMAGE ] > Transfering docker image with skopeo.${BLANK}"
        echo -e "${CYAN}[ INFO ] > Skopeo version.${BLANK}"
        skopeo --version
        echo -e "${YELLOW}[ EXECUTING ] > Executing ${REPOSITORY}/${IMAGE_NAME}:${IMAGE_VERSION} transfer.${BLANK}"
        skopeo login docker.io -u ixxel -p ${{ secrets.DOCKER_IO_PWD }}

        skopeo copy --insecure-policy \
                    --format v2s2 \
                    --dest-tls-verify=false \
                    containers-storage:localhost/${IMAGE_NAME}:${IMAGE_VERSION} \
                    docker://${REPOSITORY}/${IMAGE_NAME}:${IMAGE_VERSION}

        echo -e "${YELLOW}[ EXECUTING ] > Executing ${REPOSITORY}/${IMAGE_NAME}:latest transfer.${BLANK}"
        skopeo copy --insecure-policy \
                    --format v2s2 \
                    --dest-tls-verify=false \
                    containers-storage:localhost/${IMAGE_NAME}:${IMAGE_VERSION} \
                    docker://${REPOSITORY}/${IMAGE_NAME}:latest

        echo -e "${CYAN}[ INFO ] > Verifying upload of image ${REPOSITORY}/${IMAGE_NAME}:${IMAGE_VERSION}.${BLANK}"
        skopeo_output=$(skopeo list-tags docker://${REPOSITORY}/${IMAGE_NAME} --tls-verify=false)
        echo "$skopeo_output" | jq
        if [[ $(echo ${skopeo_output} | grep -i -E "${IMAGE_VERSION}") ]]
        then
          echo -e "${GREEN}[ CHECK SUCCESS ] > Docker image ${REPOSITORY}/${IMAGE_NAME}:${IMAGE_VERSION} found in repository.${BLANK}"
        else
          echo -e "${RED}[ STEP FAILED ] > Something went wrong when uploading the docker image ${REPOSITORY}/${IMAGE_NAME}:${IMAGE_VERSION} .${BLANK}"
          exit 1
        fi